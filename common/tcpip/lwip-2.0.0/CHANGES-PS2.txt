Changes to LWIP v2.0.0:
-----------------------

Please keep this file updated, whenever fixes are added or removed. Or if the version of LWIP ported is changed.
As much as I'll like to make a clean port of LWIP, it was clearly not made to support a kernels like our EE and IOP kernels.

1. stdlib.h will not be included in api/netdb.c and core/mem.c, when built for the IOP.

2. Changed code that signals the callback-thread within event_callback() of api/sockets.c to not signal the semaphore while interrupts are disabled:
	Originally, the event_callback function	would attempt to signal a semaphore when interrupts are disabled,
		which could violate the critical section (and hence resulting in race conditions) due to the design of the IOP/EE kernel.
	By design, SCE designed the EE and IOP kernels to do these actions, if a semaphore is signalled while interrupts are disabled/inhibited:
		Inhibit the interrupt-disabled state, allow the woken-up thread to run, before finally resuming the interrupt-inhibited state.
	
	The faulting location is here, within event_callback itself:
		    if (scb->sem_signalled == 0) {
	... as scb becomes some invalid value because select_cb_list got modified by another thread when the
		interrupt-inhibited state got interrupted.

3. Moved the code that "keeps interrupt protection time short" within event_callback() of api/sockets.c, as part of (2).
	As the IOP uses non-preemptive multitasking, re-enabling interrupts for a short period of time probably doesn't do much... except for wasting CPU time.
	The EE kernel allows threads to be preempted after interrupts, but definitely uses FCFS scheduling too. So if no interrupt occurs, then there will be no preemption either.

4. Critical-section protection within core/mem.c now disables interrupts:
	There's this part in pbuf_free() of core/pbuf.c:
	      /* p->flags == PBUF_FLAG_RAM */
	      } else {
	        mem_free(p);
	      }
	...that might cause a race conditions because that fragment of code is run with interrupts disabled,
	while mem_free() will use Semaphores to ensure access control.

5. pbuf_alloc() will no longer align the payload field, for PBUF_RAM allocations.
	This is so that frames being output will not be unaligned.

	Note: this still doesn't solve all cases. For example, generating a UDP packet will result in an unaligned final address,
	as PBUF_TRANSPORT is a general "one size fits all" option.

6. tcp_out.c now uses struct tcp_opt to set TCP packet options, so that GCC is aware that the 32-bit options may reside at unaligned addresses.
	struct tcp_opt is defined within include/lwip/prot/tcp.h.
